(()=>{"use strict";var e={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__submit-button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_active"},t="#user-post-template",n="popup_opened",r=".popup__form",o=".post__image",i=".post__like-button",u=".post__like-counter",c="post__like-button_active",s=document.querySelector(".profile__edit"),a=document.querySelector(".profile__edit-avatar"),l=document.querySelector(".profile__add-button"),f=document.querySelector(".popup__form_type_edit"),p=document.querySelector(".popup__form_type_edit-avatar"),h=(document.querySelector(".popup__form_type_confirm"),document.querySelector(".popup__input_type_name")),y=document.querySelector(".popup__input_type_description"),_=document.querySelector(".popup__form_type_add-post");function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var v=function(){function e(t,n){var r=t.userdata,o=t.data,i=t.handleImageClick,u=t.handleLikeClick;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userdata=r,this._name=o.name,this._link=o.link,this._likes=o.likes,this._id=o._id,this._templateSelector=n,this._handleImageClick=i,this._handleLikeClick=u}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._templateSelector).content.querySelector(".post").cloneNode(!0)}},{key:"getPostId",value:function(){return this._id}},{key:"isLiked",value:function(e){return JSON.stringify(this._likes).includes(JSON.stringify(e))}},{key:"generateNewPost",value:function(){this._post=this._getTemplate();var e=this._post.querySelector(o);return this._setListeners(),e.src=this._link,e.alt=this._name,this._post.querySelector(".post__title").textContent=this._name,this._post}},{key:"_setListeners",value:function(){var e=this;this._likeButton=this._post.querySelector(i),this._likeButton.addEventListener("click",(function(){e._handleLikeClick(e._likeButton.classList.contains(c))})),this._post.querySelector(o).addEventListener("click",this._handleImageClick)}},{key:"like",value:function(e){var t=this._post.querySelector(i),n=this._post.querySelector(u);this._likes=e.likes.length,0===this._likes?n.textContent="":n.textContent=this._likes,t.classList.toggle(c)}}])&&d(t.prototype,n),e}();function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var b=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._selectors=t,this._form=n}var t,n;return t=e,(n=[{key:"_showError",value:function(e,t,n,r){var o=e.querySelector("#".concat(t.id,"-error"));t.classList.add(r.inputErrorClass),o.textContent=n,o.classList.add(r.errorClass)}},{key:"_hideError",value:function(e,t,n){var r=e.querySelector("#".concat(t.id,"-error"));t.classList.remove(n.inputErrorClass),r.classList.remove(n.errorClass),r.textContent=""}},{key:"_checkValidity",value:function(e,t,n){t.validity.valid?this._hideError(e,t,n):this._showError(e,t,t.validationMessage,n)}},{key:"_hasInvalidInput",value:function(e){return e.some((function(e){return!e.validity.valid}))}},{key:"_toggleButtonState",value:function(e,t,n){this._hasInvalidInput(e)?(t.classList.add(n.inactiveButtonClass),t.setAttribute("disabled",!0)):(t.classList.remove(n.inactiveButtonClass),t.removeAttribute("disabled",!0))}},{key:"_setEventListeners",value:function(e,t){var n=this,r=Array.from(e.querySelectorAll(t.inputSelector)),o=e.querySelector(t.submitButtonSelector);this._toggleButtonState(r,o,t),r.forEach((function(i){i.addEventListener("input",(function(){n._checkValidity(e,i,t),n._toggleButtonState(r,o,t)}))}))}},{key:"enableValidation",value:function(){this._form.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners(this._form,this._selectors)}},{key:"resetValidation",value:function(){var e=this,t=Array.from(this._form.querySelectorAll(this._selectors.inputSelector)),n=this._form.querySelector(this._selectors.submitButtonSelector);t.forEach((function(t){return e._hideError(e._form,t,e._selectors)})),this._toggleButtonState(t,n,this._selectors)}}])&&m(t.prototype,n),e}();function k(e){return(k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function S(e,t,n){return(S="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=E(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function O(e,t){return!t||"object"!==k(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var L=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=E(r);if(o){var n=E(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return O(this,e)});function u(e,t){var n,r=e.data,o=e.handleImageClick,c=e.handleLikeClick,s=e.handleDeleteClick;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,{data:r,handleImageClick:o,handleLikeClick:c},t))._handleDeleteClick=s,n}return t=u,(n=[{key:"_setListeners",value:function(){S(E(u.prototype),"_setListeners",this).call(this),this._post.querySelector(".post__delete").addEventListener("click",this._handleDeleteClick)}},{key:"delete",value:function(){this._post.remove(),this._post=null}}])&&g(t.prototype,n),u}(v);function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var P=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"appendItem",value:function(e){this._container.append(e)}},{key:"prependItem",value:function(e){this._container.prepend(e)}},{key:"renderLikes",value:function(e,t,n){this._post=e,this._likes=t.likes,this._isLiked=JSON.stringify(this._likes).includes(JSON.stringify(n)),this._likes.length>0&&(this._post.querySelector(u).textContent=this._likes.length),this._isLiked&&this._post.querySelector(i).classList.add(c)}},{key:"renderPosts",value:function(e){var t=this;e.forEach((function(e){t._renderer(e)}))}}])&&C(t.prototype,n),e}();function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var R=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._closeButton=this._popup.querySelector(".popup__close-button"),this._escClose=this._handleEscClose.bind(this),this._mousedownClose=this._handleMousedownClose.bind(this)}var t,r;return t=e,(r=[{key:"open",value:function(){this._popup.classList.add(n),document.addEventListener("keydown",this._escClose),this._popup.addEventListener("mousedown",this._mousedownClose)}},{key:"close",value:function(){this._popup.classList.remove(n),this._removeEventListeners()}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"_handleMousedownClose",value:function(e){e.target.classList.contains("popup")&&this.close()}},{key:"setEventListeners",value:function(){this._closeButton.addEventListener("click",this.close.bind(this))}},{key:"_removeEventListeners",value:function(){document.removeEventListener("keydown",this._escClose),this._popup.removeEventListener("mousedown",this._mousedownClose)}},{key:"renderLoading",value:function(e){this._submitButton=this._popup.querySelector(".popup__submit-button"),this._submitButton.textContent=e?"Сохранение...":"Сохранить"}}])&&j(t.prototype,r),e}();function q(e){return(q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function I(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function T(e,t,n){return(T="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=A(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function D(e,t){return(D=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function x(e,t){return!t||"object"!==q(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function A(e){return(A=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var B=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&D(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=A(r);if(o){var n=A(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return x(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._image=t._popup.querySelector(".popup__post-image"),t._title=t._popup.querySelector(".popup__post-title"),t}return t=u,(n=[{key:"open",value:function(e){T(A(u.prototype),"open",this).call(this),this._image.src=e.link,this._image.alt=e.name,this._title.textContent=e.name}}])&&I(t.prototype,n),u}(R);function U(e){return(U="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function V(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function N(e,t,n){return(N="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=K(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function z(e,t){return(z=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function J(e,t){return!t||"object"!==U(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function K(e){return(K=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var F=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&z(e,t)}(c,e);var t,n,o,i,u=(o=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=K(o);if(i){var n=K(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return J(this,e)});function c(e){var t,n=e.submiter,o=e.selector;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),(t=u.call(this,o))._submiter=n,t._popupForm=t._popup.querySelector(r),t._handleSubmit=function(){t._submiter(t._getInputValues())},t}return t=c,(n=[{key:"_getInputValues",value:function(){var e=this;return this._inputs=this._popup.querySelectorAll(".popup__input"),this._inputValues={},this._inputs.forEach((function(t){return e._inputValues[t.name]=t.value})),this._inputValues}},{key:"setEventListeners",value:function(){N(K(c.prototype),"setEventListeners",this).call(this),this._popupForm.addEventListener("submit",this._handleSubmit)}},{key:"close",value:function(){N(K(c.prototype),"close",this).call(this),this._popup.querySelector(r).reset()}}])&&V(t.prototype,n),c}(R);function H(e){return(H="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function M(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function G(e,t,n){return(G="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=W(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function $(e,t){return($=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Q(e,t){return!t||"object"!==H(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function W(e){return(W=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var X=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&$(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=W(r);if(o){var n=W(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Q(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._popupForm=document.querySelector(".popup__form_type_confirm"),t}return t=u,(n=[{key:"handleDeleteRequest",value:function(e){this._deleteHandler=e}},{key:"setEventListeners",value:function(){var e=this;G(W(u.prototype),"setEventListeners",this).call(this),this._popupForm.addEventListener("submit",(function(t){t.preventDefault(),e._deleteHandler()}))}}])&&M(t.prototype,n),u}(R);function Y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Z=function(){function e(t){var n=t.name,r=t.description,o=t.avatar;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(n),this._description=document.querySelector(r),this._avatar=document.querySelector(o),this._userId=""}var t,n;return t=e,(n=[{key:"getUserId",value:function(){return this._userId}},{key:"getUserInfo",value:function(){return{name:this._name.textContent,description:this._description.textContent,avatar:this._avatar,id:this._userId}}},{key:"setUserInfo",value:function(e){this._name.textContent=e.name,this._description.textContent=e.about,this._avatar.src=e.avatar,this._userId=e._id}}])&&Y(t.prototype,n),e}();function ee(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function te(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ne=new(function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=t.baseUrl,this._headers=t.headers,this._authKey=t.headers.authorization}var t,n;return t=e,(n=[{key:"_checkResponse",value:function(e){return e.ok?e.json():Promise.reject("Ошибка ".concat(e.status))}},{key:"getUserInfo",value:function(){return fetch("".concat(this._url,"/users/me"),{headers:{authorization:"".concat(this._authKey)},method:"GET"}).then(this._checkResponse)}},{key:"getInitialCards",value:function(){return fetch("".concat(this._url,"/cards"),{headers:{authorization:"".concat(this._authKey)},method:"GET"}).then(this._checkResponse)}},{key:"editUserProfile",value:function(e){var t=e.username,n=e.description;return fetch("".concat(this._url,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:t,about:n})}).then(this._checkResponse)}},{key:"setAvatar",value:function(e){var t=e.link;return fetch("".concat(this._url,"/users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:t})}).then(this._checkResponse)}},{key:"addNewPost",value:function(e){var t=e.name,n=e.link;return fetch("".concat(this._url,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify({name:t,link:n})}).then(this._checkResponse)}},{key:"likePost",value:function(e,t){return e?fetch("".concat(this._url,"/cards/likes/").concat(t),{headers:{authorization:"".concat(this._authKey)},method:"DELETE"}).then(this._checkResponse):fetch("".concat(this._url,"/cards/likes/").concat(t),{headers:{authorization:"".concat(this._authKey)},method:"PUT"}).then(this._checkResponse)}},{key:"deletePost",value:function(e){return fetch("".concat(this._url,"/cards/").concat(e),{headers:{authorization:"".concat(this._authKey)},method:"DELETE"}).then(this._checkResponse)}}])&&ee(t.prototype,n),e}())({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-19",headers:{authorization:"41ef509f-c882-46a6-b392-9507337e8b9c","Content-Type":"application/json"}}),re=new b(e,f),oe=new b(e,_),ie=new b(e,p),ue=new Z({name:".profile__name",description:".profile__description",avatar:".profile__avatar"}),ce=[ne.getInitialCards(),ne.getUserInfo()];Promise.all(ce).then((function(e){var n,r,o=(r=2,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var u,c=e[Symbol.iterator]();!(r=(u=c.next()).done)&&(n.push(u.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}}(n,r)||function(e,t){if(e){if("string"==typeof e)return te(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?te(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],u=o[1];ue.setUserInfo(u);var c=new P({renderer:function(e){var n=e.owner._id==u._id?f(e,t):a(e,"#post-template");c.renderLikes(n,e,u),c.appendItem(n)}},".posts__list"),s=new F({submiter:function(e){s.renderLoading(!0),ne.addNewPost(e).then((function(e){var n=f(e,t);c.prependItem(n),s.close()})).catch((function(e){return console.log("Ошибка: ".concat(e))})).finally((function(){return s.renderLoading(!1)}))},selector:".popup_type_add-post"}),a=function(e,t){var n=new v({userdata:u,data:e,handleImageClick:function(){return ae.open(e)},handleLikeClick:function(e){return ne.likePost(e,n.getPostId()).then((function(e){return n.like(e)})).catch((function(e){return console.log("Ошибка: ".concat(e))}))}},t);return n.generateNewPost()},f=function(e,t){var n=new L({data:e,handleImageClick:function(){return ae.open(e)},handleLikeClick:function(e){return ne.likePost(e,n.getPostId()).then((function(e){return n.like(e)})).catch((function(e){return console.log("Ошибка: ".concat(e))}))},handleDeleteClick:function(){return function(e){se.open(),se.handleDeleteRequest((function(){ne.deletePost(e.getPostId()).then(e.delete()).then(se.close()).catch((function(e){return console.log("Ошибка: ".concat(e))}))}))}(n)}},t);return n.generateNewPost()};l.addEventListener("click",(function(){oe.resetValidation(),s.open()})),c.renderPosts(i),s.setEventListeners()})).catch((function(e){return console.log("Ошибка: ".concat(e))}));var se=new X(".popup_type_confirm"),ae=new B(".popup_type_photo"),le=new F({submiter:function(e){le.renderLoading(!0),ne.setAvatar(e).then((function(e){ue.setUserInfo(e),le.close()})).catch((function(e){return console.log("Ошибка: ".concat(e))})).finally((function(){return le.renderLoading(!1)}))},selector:".popup_type_edit-avatar"}),fe=new F({submiter:function(e){fe.renderLoading(!0),ne.editUserProfile(e).then((function(e){ue.setUserInfo(e),fe.close()})).catch((function(e){return console.log("Ошибка: ".concat(e))})).finally((function(){return fe.renderLoading(!1)}))},selector:".popup_type_edit"});a.addEventListener("click",(function(){ie.resetValidation(),le.open()})),s.addEventListener("click",(function(){var e=ue.getUserInfo();h.value=e.name,y.value=e.description,re.resetValidation(),fe.open()})),le.setEventListeners(),ae.setEventListeners(),fe.setEventListeners(),se.setEventListeners(),ie.enableValidation(),re.enableValidation(),oe.enableValidation()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,